{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"echowrn's blog","date":"2022-05-09T10:44:06.475Z","updated":"2022-05-09T10:44:06.467Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"自我介绍正文"},{"title":"[404]","date":"2022-05-09T10:41:32.711Z","updated":"2022-05-09T10:41:32.711Z","comments":true,"path":"404.html","permalink":"http://example.com/404.html","excerpt":"","text":""}],"posts":[{"title":"计算机网络","slug":"计算机网络","date":"2022-05-09T12:14:40.529Z","updated":"2022-05-09T12:36:01.468Z","comments":true,"path":"2022/05/09/计算机网络/","link":"","permalink":"http://example.com/2022/05/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","excerpt":"","text":"应用层1.HTTP 头部包含哪些信息12HTTP 头部本质上是一个传递额外重要信息的键值对。主要分为：通用头部，请求头部，响应头部和实体头部 2.Keep-Alive 和非 Keep-Alive 区别，对服务器性能有影响吗区别： 123早期的 HTTP/1.0 中，浏览器每次发起 HTTP 请求都要与服务器创建一个新的 TCP 连接，服务器完成请求处理后立即断开 TCP 连接，服务器不跟踪每个客户也不记录过去的请求。在 HTTP/1.1 版本中默认使用持久连接，在此之前的 HTTP 版本的默认连接都是使用非持久连接，如果想要在旧版本的 HTTP 协议上维持持久连接，则需要指定 connection 的首部字段的值为 Keep-Alive 来告诉对方这个请求响应完成后不要关闭，下一次咱们还用这个请求继续交流。 对服务器性能的影响： 对于非 Keep-Alive 来说，必须为每一个请求的对象建立和维护一个全新的连接。对于每一个这样的连接，客户机和服务器都要分配 TCP 的缓冲区和变量，这给服务器带来的严重的负担，因为一台 Web 服务器可能同时服务于数以百计的客户机请求。在 Keep-Alive 方式下，服务器在响应后保持该 TCP 连接打开，在同一个客户机与服务器之间的后续请求和响应报文可通过相同的连接进行传送。甚至位于同一台服务器的多个 Web 页面在从该服务器发送给同一个客户机时，可以在单个持久 TCP 连接上进行。 keep-Alive缺点： 1Keep-Alive 并不是没有缺点的，当长时间的保持 TCP 连接时容易导致系统资源被无效占用，若对 Keep-Alive 模式配置不当，将有可能比非 Keep-Alive 模式带来的损失更大。因此，我们需要正确地设置 keep-alive timeout 参数，当 TCP 连接在传送完最后一个 HTTP 响应，该连接会保持 keepalive_timeout 秒，之后就开始关闭这个链接。 3.HTTP 长连接短连接使用场景是什么123长连接(持久连接)：多用于操作频繁，点对点的通讯，而且客户端连接数目较少的情况。例如即时通讯、网络游戏等。短连接：用户数目较多的Web网站的 HTTP 服务一般用短连接。例如京东，淘宝这样的大型网站一般客户端数量达到千万级甚至上亿，若采用长连接势必会使得服务端大量的资源被无效占用，所以一般使用的是短连接。 区分TCP长连接和HTTP长连接： 12HTTP长连接通过Client和Server的一些关闭策略实现TCP长连接是通过HTTP1.1头部信息KeepAlive实现 4.怎么知道 HTTP 的报文长度服务器在响应报文中有两种表现形式 12对于小点的文件，直接给出 content-length,也就是本次返回的数据长度对于大文件，使用 Transfer-Encoding:chunked 字段，不传输数据长度，客户端只知道是分组传输，这也是订好了协议，客户端收到了会进行组装。 分组传输编码规则： 5.HTTP 方法了解哪些12345http1.0：get（读取数据）、head（获取报头）、post（提交数据处理请求）；http1.1：（增加）put（增或换）、delete（删除）、options（返回支持方法）、connect（server代理访问）、trace（服务器返回接收数据）、patch（局部更新） 6.GET 和 POST 的区别123对于GET方式的请求，浏览器会把http header和data一并发送出去，服务端响应200，请求成功。对于POST方式的请求，浏览器会先发送http header给服务端，告诉服务端等一下会有数据过来，服务端响应100 continue，告诉浏览器我已经准备接收数据，浏览器再post发送一个data给服务端，服务端响应200，请求成功。 操作方式 数据位置 明文密文 数据安全 长度限制 应用场景 GET HTTP包头（URL之后） 明文 不安全 长度较小 查询数据 POST HTTP正文 可明可密 安全 支持较大数据传输 修改数据 7.GET 的长度限制是多少123HTTP 中的 GET 方法是通过 URL 传递数据的，而 URL 本身并没有对数据的长度进行限制，真正限制 GET 长度的是浏览器。由于 POST 方法请求参数在请求主体中，理论上讲，post 方法是没有大小限制的，而真正起限制作用的是服务器处理程序的处理能力。 URL构成：协议 + :// + 认证信息 + @ + 域名 or IP地址 + 端口号 + 资源路径 + ? + 查询字符串 + # + 片段标识符 整个URL 的长度，就是指包含上述所有组成部分在内的总长度，数据部分就是指查询字符串。 8.HTTP 与 HTTPs 的工作方式【建立连接的过程】​ HTTP（Hyper Text Transfer Protocol: 超文本传输协议） 是一种简单的请求 - 响应协议，被用于在 Web 浏览器和网站服务器之间传递消息。 ​ HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer）是以安全为目标的 HTTP 协议，在 HTTP 的基础上通过传输加密和身份认证的方式保证了传输过程的安全性。 12345678910111213141516171819HTTP:默认用TCP协议的80端口（可以改），通信内容明文传输，不处理HTTPS:1.请求：443端口，支持算法，密钥长度理解：两网友约定明天出去玩，玩什么呢？爬山，游泳，游乐园选一个吧2.响应：选择一种，将其密钥组件一起发给客户端理解：我们去游乐园吧3.响应：数字证书理解：为了证明我是个合法公民。给你看看我的身份证，身份证是XX公安局发的，身份证号是XX,10年后过期4.响应：协商完成理解：OK，我同意去游乐园5.生成随机密码串，并使用证书公钥加密理解：为了互相证明我们是协商的网友，每个句尾加个“喵”6.请求：尝试使用加密串加密理解：我们试试，我是客户端喵7.响应：发送finish结束理解：我说完了你试试8.响应：和客户端相同进行加密发送理解：服务端喵然后，SSL链接完成 9.HTTPS 和 HTTP 的区别12341.HTTP 协议以明文方式发送内容，数据都是未加密的，安全性较差。2.HTTPS 数据传输过程是加密的，安全性较好。3.HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是 80 端口，后者是 443 端口。4.HTTPS 协议需要到数字认证机构（Certificate Authority, CA）申请证书，一般需要一定的费用。5.HTTP 页面响应比 HTTPS 快，主要因为 HTTP 使用 3 次握手建立连接，客户端和服务器需要握手 3 次，而 HTTPS 除了 TCP 的 3 次握手，还需要经历一个 SSL 协商过程。 10.HTTPS 的加密方式https://zhuanlan.zhihu.com/p/43789231 1HTTPS 采用对称加密和非对称加密相结合的方式，首先使用 SSL/TLS 协议进行加密传输，为了弥补非对称加密的缺点，HTTPS 采用证书来进一步加强非对称加密的安全性，通过非对称加密，客户端和服务端协商好之后进行通信传输的对称密钥，后续的所有信息都通过该对称秘钥进行加密解密，完成整个 HTTPS 的流程。 11.客户端为什么信任第三方证书123假设中间人篡改了证书原文，由于他没有 CA 机构的私钥，所以无法得到此时加密后的签名，因此无法篡改签名。客户端浏览器收到该证书后会发现原文和签名解密后的值不一致，则说明证书被中间人篡改，证书不可信，从而终止向服务器传输信息。上述过程说明证书无法被篡改，我们考虑更严重的情况，例如中间人拿到了 CA 机构认证的证书，它想窃取网站 A 发送给客户端的信息，于是它成为中间人拦截到了 A 传给客户端的证书，然后将其替换为自己的证书。此时客户端浏览器收到的是被中间人掉包后的证书，但由于证书里包含了客户端请求的网站信息，因此客户端浏览器只需要把证书里的域名与自己请求的域名比对一下就知道证书有没有被掉包了。 12篡改：加密签名与原文签名对比；调包：请求域名与证书域名对比； 12.HTTP 是不保存状态的协议,如何保存用户状态123451.基于Session，服务器创建并保存键值对：SessionId-Session，然后将SessionId下发给客户端，客户端将其存在Cookie中，每次请求带上这个SessionId，服务器就可以将状态和会话联系起来。2.基于Cookie，服务器发送响应消息时在响应头中设置Set-Cookie字段，存储客户端的状态信息。客户端根据这个字段来创建Cookie并在请求时带上（每个Cookie都包含着客户端的状态信息），从而实现状态保持。3.二者的区别：后者完全将会话状态存储在浏览器Cookie中。4.Cookie被禁用了，可以通过重写URL的方式将会话标识放在URL的参数里 13.状态码 分类 分类描述 1XX 指示信息–表示请求正在处理 2XX 成功–表示请求已被成功处理完毕 3XX 重定向–要完成的请求需要进行附加操作 4XX 客户端错误–请求有语法错误或者请求无法实现，服务器无法处理请求 5XX 服务器端错误–服务器处理请求出现错误 12345678910111213141516200 请求成功204 请求成功但无内容返回206 范围请求成功301 永久重定向30(2|3|7)临时重定向，语义和实现有略微区别；304 带if-modified-since 请求首部的条件请求，条件没有满足400 语法错误（前端挨打）401 需要认证信息403 拒绝访问404 找不到资源412 除if-modified-since 以外的条件请求，条件未满足500 服务器错误（后端挨打）503 服务器宕机了（DevOps or IT 挨打） 14.HTTP&#x2F;1.1 和 HTTP&#x2F;1.0 的区别1234567891.缓存处理：在 HTTP/1.0 中主要使用 header 里的 if-modified-Since, Expries 来做缓存判断的标准。而 HTTP/1.1 请求头中添加了更多与缓存相关的字段，从而支持更为灵活的缓存策略，例如 Entity-tag, If-Unmodified-Since, If-Match, If-None-Match 等可供选择的缓存头来控制缓存策略。2.节约带宽： 当客户端请求某个资源时，HTTP/1.0 默认将该资源相关的整个对象传送给请求方，但很多时候可能客户端并不需要对象的所有信息。而在 HTTP/1.1 的请求头中引入了 range 头域，它允许只请求部分资源，其使得开发者可以多线程请求某一资源，从而充分的利用带宽资源，实现高效并发。3.错误通知的管理：HTTP/1.1 在 1.0 的基础上新增了 24 个错误状态响应码，例如 414 表示客户端请求中所包含的 URL 地址太长，以至于服务器无法处理；410 表示所请求的资源已经被永久删除。4.Host 请求头：早期 HTTP/1.0 中认为每台服务器都绑定一个唯一的 IP 地址并提供单一的服务，请求消息中的 URL 并没有传递主机名。而随着虚拟主机的出现，一台物理服务器上可以存在多个虚拟主机，并且它们共享同一个 IP 地址。为了支持虚拟主机，HTTP/1.1 中添加了 host 请求头，请求消息和响应消息中应声明这个字段，若请求消息中缺少该字段时服务端会响应一个 404 错误状态码。5.长连接：HTTP/1.0 默认浏览器和服务器之间保持短暂连接，浏览器的每次请求都需要与服务器建立一个 TCP 连接，服务器完成后立即断开 TCP 连接。HTTP/1.1 默认使用的是持久连接，其支持在同一个 TCP 请求中传送多个 HTTP 请求和响应。此之前的 HTTP 版本的默认连接都是使用非持久连接，如果想要在旧版本的 HTTP 协议上维持持久连接，则需要指定 Connection 的首部字段的值为 Keep-Alive。 15.HTTP&#x2F;1.X 和 HTTP&#x2F;2.0 的区别12345671.二进制传送：之前版本 数据都是用文本传输，因为文本有多种格式，所以不能很好地适应所有场景； 2.0传送的是二进制，相当于统一了格式2.多路复用：1.1虽然默认复用TCP连接，但是每个请求是串行执行的，如果前面的请求超时，后面的请求只能等着（也就是线头阻塞）； 2.0的时候每个请求有自己的ID，多个请求可以在同一个TCP连接上并行执行，不会互相影响3.header压缩：每次进行HTTP请求响应的时候，头部里很多的字段都是重复的，在2.0中，将字段记录到一张表中，头部只需要存放字段对应的编号就行，用的时候只需要拿着编号去表里查找就行，减少了传输的数据量4.服务端推送：服务器会在客户端没发起请求的时候主动推送一些需要的资源，比如客户端请求一个html文件，服务器发送完之后会把和这个html页面相关的静态文件也发送给客户端，当客户端准备向服务器请求静态文件的时候，就可以直接从缓存中获取，就不需要再发起请求了 16.域名解析查询的两种方式121.递归查询：如果主机所询问的本地域名服务器不知道被查询域名的 IP 地址，那么本地域名服务器就以 DNS 客户端的身份，向其他根域名服务器继续发出查询请求报文，即替主机继续查询，而不是让主机自己进行下一步查询，如上图步骤（1）和（10）。2.迭代查询：当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的 IP 地址，要么告诉本地服务器下一步应该找哪个域名服务器进行查询，然后让本地服务器进行后续的查询，如上图步骤（2）~（9） 17.DNS 为什么用 UDP12345DNS 既使用 TCP 又使用 UDP。当进行区域传送（主域名服务器向辅助域名服务器传送变化的那部分数据）时会使用 TCP，因为数据同步传送的数据量比一个请求和应答的数据量要多，而 TCP 允许的报文长度更长，因此为了保证数据的正确性，会使用基于可靠连接的 TCP。当客户端向 DNS 服务器查询域名 ( 域名解析) 的时候，一般返回的内容不会超过 UDP 报文的最大长度，即 512 字节。用 UDP 传输时，不需要经过 TCP 三次握手的过程，从而大大提高了响应速度，但这要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。 18.实现DNS劫持12劫持：通过修改计算机的DNS服务器配置将计算机的DNS请求都发到一个恶意的DNS服务器。预防：直接使用IP访问或者直接指定DNS服务器。 19.socket() 套接字有哪些12345678910套接字（Socket）是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象，网络进程通信的一端就是一个套接字，不同主机上的进程便是通过套接字发送报文来进行通信。例如 TCP 用主机的 IP 地址 + 端口号作为 TCP 连接的端点，这个端点就叫做套接字。主要有三种类型：流套接字（SOCK_STREAM）、数据报套接字（SOCK_DGRAM）、原始套接字（SOCK_RAW）流套接字：基于 TCP 传输协议，主要用于提供面向连接、可靠的数据传输服务。数据报套接字：基于 UDP 传输协议，对应于无连接的 UDP 服务应用。原始套接字：用来传送非传输层数据包（例如 Ping 命令时用的 ICMP 协议数据包）或者遇到操作系统无法处理的数据包。 20.URI（统一资源标识符）和 URL（统一资源定位符）之间的区别123URI：告诉你有这个资源URL：告诉你这个资源在哪里简单地说，只要能唯一标识资源的就是 URI，在 URI 的基础上给出其资源的访问方式的就是 URL。 21.如果你访问一个网站很慢，怎么排查和解决123456781.首先最直接的方法是查看本地网络是否正常2.当网速测试正常时，我们对网站服务器速度进行排查，通过 ping 命令查看链接到服务器的时间和丢包等情况3.如果网页打开的速度时快时慢，甚至有时候打不开，有可能是空间不稳定的原因。4.如果使用了CDN，CDN节点网络质量差也会导致打开慢5.CDN的解析IP跨网6.CDN的服务器负载高7.源站服务器过载或出口带宽被占满8.DNS解析耗时 22.其他协议12FTP（File Transfer Protocol，文件传输协议）是用于在网络上进行文件传输的一套标准协议，使用客户/服务器模式，使用 TCP 数据报，提供交互式访问，双向传输。TFTP（Trivial File Transfer Protocol，简单文件传输协议）一个小且易实现的文件传输协议，也使用客户/服务器方式，使用 UDP 数据报，只支持文件传输而不支持交互，没有列目录，不能对用户进行身份鉴定。 1SMTP（Simple Mail Transfer Protocol，简单邮件传输协议）是在 Internet 传输 Email 的标准，是一个相对简单的基于文本的协议。在其之上指定了一条消息的一个或多个接收者（在大多数情况下被确认是存在的），然后消息文本会被传输。可以很简单地通过 Telnet 程序来测试一个 SMTP 服务器。SMTP 使用 TCP 端口 25。 1234DHCP ( Dynamic Host Configuration Protocol，动态主机设置协议 ) 是一个局域网的网络协议，使用 UDP 协议工作，主要有两个用途：用于内部网络或网络服务供应商自动分配 IP 地址给用户用于内部网络管理员作为对所有电脑作中央管理的手段 23.网页解析全过程【用户输入网址到显示对应页面的全过程】 12345678910111.DNS 解析：当用户输入一个网址并按下回车键的时候，浏览器获得一个域名，而在实际通信过程中，我们需要的是一个 IP 地址，因此我们需要先把域名转换成相应 IP 地址。【具体细节参看问题 16，17】2.TCP 连接：浏览器通过 DNS 获取到 Web 服务器真正的 IP 地址后，便向 Web 服务器发起 TCP 连接请求，通过 TCP 三次握手建立好连接后，浏览器便可以将 HTTP 请求数据发送给服务器了。【三次握手放在传输层详细讲解】3.发送 HTTP 请求：浏览器向 Web 服务器发起一个 HTTP 请求，HTTP 协议是建立在 TCP 协议之上的应用层协议，其本质是在建立起的TCP连接中，按照HTTP协议标准发送一个索要网页的请求。在这一过程中，会涉及到负载均衡等操作。4.处理请求并返回：服务器获取到客户端的 HTTP 请求后，会根据 HTTP 请求中的内容来决定如何获取相应的文件，并将文件发送给浏览器。5.浏览器渲染：浏览器根据响应开始显示页面，首先解析 HTML 文件构建 DOM 树，然后解析 CSS 文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。6.断开连接：客户端和服务器通过四次挥手终止 TCP 连接。【其中的细节放在传输层详细讲解】 传输层1.三次握手和四次挥手机制三次握手： 四次挥手： 123456789101112131415三次握手：（建立对话）成员client:打开对讲机成员Server:打开对讲机，并开始听对讲机(Listen阶段)成员client:Server,听得到我说话吗，（发出SYN包,SYN = 1），听到请回答（等待确认seq=x），并开始等待（说完进入SYN-SEND阶段）成员Server:收到，收到（SYN = 1,ACK = 1）,听的挺清楚（Seq =y, Ack = x+1）,并开始等待（说完进入SYN-RCVD阶段）成员client：好的，好的（ACK=1），我要开始跟你讲一件事情（Seq = x+1,Ack = y+1）;(进入 ESTABLISHED阶段)成员Server:默默的点点头，并对自己说可以（进入 ESTABLISHED阶段）四次挥手：（结束对讲）成员client:我事情讲完了，你知道吗（FIN = 1,Seq = u）；（进入FIN-WAIT-1）成员Server:哦，哦（ACK = 1, Seq = v）,知道了（Ack = u+1）,让我再理一下（进入CLOSE-WAIT）成员client:对自己默默说了句，好的，等等你（进入FIN-WAIT-2）成员Server:哦，这个是这么处理对吧，知道了（FIN =1,ACK=1,Seq = w,Ack = u+1）(进入LAST-ACK)成员client:对的，是的（ACK=1,Seq= u+1,Ack = w+1）,并关掉对讲机（close）成员server:听到确认和嘟嘟声，关掉对讲机（close） 2.如果三次握手的时候每次握手信息对方没有收到会怎么样 3.为什么要进行三次握手？两次握手可以吗？1三次握手的主要目的是确认自己和对方的发送和接收都是正常的，从而保证了双方能够进行可靠通信。若采用两次握手，当第二次握手后就建立连接的话，此时客户端知道服务器能够正常接收到自己发送的数据，而服务器并不知道客户端是否能够收到自己发送的数据。 4.第 2 次握手传回了 ACK，为什么还要传回 SYN1服务器端防止SYN泛洪攻击时，回传回一个initial sequence，这个seq以源IP 源端口号，目的地IP，端口号还有只有服务器知道的一个秘密数，经过散列函数散列而来，之后客户端传回的ack号就是用这个序号，由于IP什么的都没有改变，所以可以确认仍然是之前的客户机。所以，从这个角度上，SYN可以理解为是服务器端传回数据的初始序号，也可以说是确认服务器端收到的消息来自于同一个客户机 5.为什么要四次挥手？123释放 TCP 连接时之所以需要四次挥手，是因为 FIN 释放连接报文和 ACK 确认接收报文是分别在两次握手中传输的。 当主动方在数据传送结束后发出连接释放的通知，由于被动方可能还有必要的数据要处理，所以会先返回 ACK 确认收到报文。当被动方也没有数据再发送的时候，则发出连接释放通知，对方确认后才完全关闭TCP连接。简单来说就是因为TCP是全双工的，两个方向的连接需要单独关闭。 6.CLOSE-WAIT 和 TIME-WAIT 的状态和意义12345678CLOSE-WAIT:是服务端发出第一次挥手(整体第二次)进入的状态,表示&quot;我准备关闭了,但是还有自己的事情处理一下,你等我处理完&quot;等服务器处理好自己的数据业务,则表示我准备好了,再发送 fin 包TIME-WAIT:是第四次挥手后,客户端进入的状态,是客户端必要的等待时间,目的是等待:1-服务端的对应端口关闭与客户端发送到服务端的数据到达(可能出现延迟),如果不存在这个步骤就会导致两个问题:①客户端立即关闭后,立即又用同样的端口握手并建立通信,此时上次的连接残留的数据包会被误认为是本次的,造成数据异常②客户端直接关闭后,若服务端重新发送 fin 包,客户端就会回应 RST,会报异常,但是其实只是正常的关闭连接过程，并没有出现异常情况。 7.TIME_WAIT 状态会导致什么问题，怎么解决1修改配置或设置 SO_REUSEADDR 套接字，使得服务器处于 TIME-WAIT 状态下的端口能够快速回收和重用。 8.TIME-WAIT 为什么是 2MSL1232 MSL 即是服务器端发出 FIN 报文和客户端发出的 ACK 确认报文所能保持有效的最大时长。如果服务器在1MSL后仍然没有收到客户端发送的ACK确认报文，那么它会向客户端重传FIN报文，对客户端而言，从客户端发出ACK报文起，重传的FIN报文的最晚到达时间是2MSL. 9.有很多 TIME-WAIT 状态如何解决1采用长连接的方式减少 TCP 的连接与断开，在长连接的业务中往往不需要考虑 TIME-WAIT 状态，但其实在长连接的业务中并发量一般不会太高。 10.有很多 CLOSE-WAIT 怎么解决12首先检查是不是自己的代码问题（看是否服务端程序忘记关闭连接），如果是，则修改代码。调整系统参数，包括句柄相关参数和 TCP/IP 的参数，一般一个 CLOSE_WAIT 会维持至少 2 个小时的时间，我们可以通过调整参数来缩短这个时间。 11.TCP 和 UDP 的区别 类型 是否面向连接 传输可靠性 传输形式 传输效率 所需资源 应用场景 首部字节 TCP 是 可靠 字节流 慢 多 文件传输、邮件传输 20~60 UDP 否 不可靠 数据报文段 快 少 即时通讯、域名转换 8个字节 12.TCP 协议中的定时器1234567建立连接定时器，主动方重传定时器，主被动方坚持定时器，主被动方延迟应答定时器，要进行确认的一方保活定时器，主被动方FIN_WAIT_2定时器，主动方TIME_WAIT定时器，主动方 13.TCP 是如何保证可靠性的123456789101112131.数据分块：应用数据被分割成 TCP 认为最适合发送的数据块。2.序列号和确认应答：TCP 给发送的每一个包进行编号，在传输的过程中，每次接收方收到数据后，都会对传输方进行确认应答，即发送 ACK 报文，这个 ACK 报文当中带有对应的确认序列号，告诉发送方成功接收了哪些数据以及下一次的数据从哪里开始发。除此之外，接收方可以根据序列号对数据包进行排序，把有序数据传送给应用层，并丢弃重复的数据。3.校验和： TCP 将保持它首部和数据部分的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到报文段的检验和有差错，TCP 将丢弃这个报文段并且不确认收到此报文段。4.流量控制： TCP 连接的双方都有一个固定大小的缓冲空间，发送方发送的数据量不能超过接收端缓冲区的大小。当接收方来不及处理发送方的数据，会提示发送方降低发送的速率，防止产生丢包。TCP 通过滑动窗口协议来支持流量控制机制。5.拥塞控制：当网络某个节点发生拥塞时，减少数据的发送。6.ARQ协议：也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。7.超时重传：当 TCP 发出一个报文段后，它启动一个定时器，等待目的端确认收到这个报文段。如果超过某个时间还没有收到确认，将重发这个报文段。 123TCP虽然是面向字节流的，但TCP传输数据单元却是报文段面向字节流的含义是：虽然应用程序和TCP的交互是一次一个数据块(大小不等)，但TCP把应用程序交付下来的数据看成仅仅是一连串的无结构的字节流...... 14.UDP 为什么是不可靠的？bind 和 connect 对于 UDP 的作用是什么1UDP 只有一个 socket 接收缓冲区，没有 socket 发送缓冲区，即只要有数据就发，不管对方是否可以正确接收。而在对方的 socket 接收缓冲区满了之后，新来的数据报无法进入到 socket 接受缓冲区，此数据报就会被丢弃，因此 UDP 不能保证数据能够到达目的地，此外，UDP 也没有流量控制和重传机制，故UDP的数据传输是不可靠的。 15.TCP 超时重传的原理1发送方在发送一次数据后就开启一个定时器，在一定时间内如果没有得到发送数据包的 ACK 报文，那么就重新发送数据，在达到一定次数还没有成功的话就放弃重传并发送一个复位信号。其中超时时间的计算是超时的核心，而定时时间的确定往往需要进行适当的权衡，因为当定时时间过长会造成网络利用率不高，定时太短会造成多次重传，使得网络阻塞。在 TCP 连接过程中，会参考当前的网络状况从而找到一个合适的超时时间。 16.TCP 的停止等待协议是什么1停止等待协议是为了实现 TCP 可靠传输而提出的一种相对简单的协议，该协议指的是发送方每发完一组数据后，直到收到接收方的确认信号才继续发送下一组数据。 1在已发送但未确认的报文被确认之前, 发送方的滑动窗口将不会滑动。 17.TCP 最大连接数限制理论上： 1client 在每次发起 TCP 连接请求时，如果自己并不指定端口的话，系统会随机选择一个本地端口（local port），该端口是独占的，不能和其他 TCP 连接共享。TCP 端口的数据类型是 unsigned short，因此本地端口个数最大只有 65536，除了端口 0不能使用外，其他端口在空闲时都可以正常使用，这样可用端口最多有 65535 个。 1server 通常固定在某个本地端口上监听，等待 client 的连接请求。不考虑地址重用（Unix 的 SO_REUSEADDR 选项）的情况下，即使 server 端有多个 IP，本地监听端口也是独占的，因此 server 端 TCP 连接 4 元组中只有客户端的 IP 地址和端口号是可变的，因此最大 TCP 连接为客户端 IP 数 × 客户端 port 数，对 IPV4，在不考虑 IP 地址分类的情况下，最大 TCP 连接数约为 2 的 32 次方（IP 数）× 2 的 16 次方（port 数），也就是 server 端单机最大 TCP 连接数约为 2 的 48 次方。 实际中： 1在实际环境中，受到明文规定（一些 IP 地址和端口具有特殊含义，没有对外开放）、机器资源、操作系统等的限制，特别是 sever 端，其最大并发 TCP 连接数远不能达到理论上限。对 server 端，通过增加内存、修改最大文件描述符个数等参数，单机最大并发 TCP 连接数超过 10 万 是没问题的。 18.TCP 流量控制与拥塞控制12流量控制:所谓流量控制就是让发送方的发送速率不要太快，让接收方来得及接收。如果接收方来不及接收发送方发送的数据，那么就会有分组丢失。在 TCP 中利用可变长的滑动窗口机制可以很方便的在 TCP 连接上实现对发送方的流量控制。主要的方式是接收方返回的 ACK 中会包含自己的接收窗口大小，以控制发送方此次发送的数据量大小（发送窗口大小）。 12拥塞控制:在实际的网络通信系统中，除了发送方和接收方外，还有路由器，交换机等复杂的网络传输线路，此时就需要拥塞控制。拥塞控制是作用于网络的，它是防止过多的数据注入到网络中，避免出现网络负载过大的情况。常用的解决方法有：慢开始和拥塞避免、快重传和快恢复。 12拥塞控制和流量控制的区别:拥塞控制往往是一种全局的，防止过多的数据注入到网络之中，而TCP连接的端点只要不能收到对方的确认信息，猜想在网络中发生了拥塞，但并不知道发生在何处，因此，流量控制往往指点对点通信量的控制，是端到端的问题。 19.如果接收方滑动窗口满了，发送方会怎么做1基于 TCP 流量控制中的滑动窗口协议，我们知道接收方返回给发送方的 ACK 包中会包含自己的接收窗口大小，若接收窗口已满，此时接收方返回给发送方的接收窗口大小为 0，此时发送方会等待接收方发送的窗口大小直到变为非 0 为止，然而，接收方回应的 ACK 包是存在丢失的可能的，为了防止双方一直等待而出现死锁情况，此时就需要坚持计时器来辅助发送方周期性地向接收方查询，以便发现窗口是否变大【坚持计时器参考问题】，当发现窗口大小变为非零时，发送方便继续发送数据。 20.TCP 拥塞控制采用的四种算法 1慢开始，拥塞避免，快重传，快恢复。 21.TCP 粘包问题为什么会发生TCP粘包和拆包? 1234567① 发送方写入的数据大于套接字缓冲区的大小，此时将发生拆包。② 发送方写入的数据小于套接字缓冲区大小，由于 TCP 默认使用 Nagle 算法，只有当收到一个确认后，才将分组发送给对端，当发送方收集了多个较小的分组，就会一起发送给对端，这将会发生粘包。③ 进行 MSS （最大报文长度）大小的 TCP 分段，当 TCP 报文的数据部分大于 MSS 的时候将发生拆包。④ 发送方发送的数据太快，接收方处理数据的速度赶不上发送端的速度，将发生粘包。 常见解决方法： 12345① 在消息的头部添加消息长度字段，服务端获取消息头的时候解析消息长度，然后向后读取相应长度的内容。② 固定消息数据的长度，服务端每次读取既定长度的内容作为一条完整消息，当消息不够长时，空位补上固定字符。但是该方法会浪费网络资源。③ 设置消息边界，也可以理解为分隔符，服务端从数据流中按消息边界分离出消息内容，一般使用换行符。 什么时候需要处理粘包问题？ 1当接收端同时收到多个分组，并且这些分组之间毫无关系时，需要处理粘包；而当多个分组属于同一数据的不同部分时，并不需要处理粘包问题。 关于TCP没有包: 1231.单看传输层，TCP是「面向字节流」传输的，本身是没有「包」的概念的，接收方将接收的报文段（segment）的数据提取出来按序放置在缓存中。2.但是从应用层的角度看是有「包」的概念的，例如http/1.1中采用了「管道(pipeline)」的思想，即可以多个http数据流「复用」同一个TCP，因此各个http数据流之间是「纠缠」的，那么就需要在应用层进行处理，「区分不同」的数据流，自然就需要处理「粘包」的问题。3.个人认为TCP层没有「包」的概念反映了TCP层对应用层「多数据流」的支持较弱，这恰恰导致了粘包问题。而这种弱势也导致了HTTP/3转向了QUIC，也就是基于UDP，自行实现更好的「多数据流复用/分用」。 22.TCP 报文包含哪些信息 23.SYN FLOOD 是什么1SYN Flood 是种典型的 DoS（拒绝服务）攻击，其目的是通过消耗服务器所有可用资源使服务器无法用于处理合法请求。通过重复发送初始连接请求（SYN）数据包，攻击者能够压倒目标服务器上的所有可用端口，导致目标设备根本不响应合法请求。 24.为什么服务端易受到 SYN 攻击123在 TCP 建立连接的过程中，因为服务端不确定自己发给客户端的 SYN-ACK 消息或客户端反馈的 ACK 消息是否会丢在半路，所以会给每个待完成的半开连接状态设一个定时器，如果超过时间还没有收到客户端的 ACK 消息，则重新发送一次 SYN-ACK 消息给客户端，直到重试超过一定次数时才会放弃。服务端为了维持半开连接状态，需要分配内核资源维护半开连接。当攻击者伪造海量的虚假 IP 向服务端发送 SYN 包时，就形成了 SYN FLOOD 攻击。攻击者故意不响应 ACK 消息，导致服务端被大量注定不能完成的半开连接占据，直到资源耗尽，停止响应正常的连接请求。 1234解决方法：直接的方法是提高 TCP 端口容量的同时减少半开连接的资源占用时间，然而该方法只是稍稍提高了防御能力；部署能够辨别恶意 IP 的路由器，将伪造 IP 地址的发送方发送的 SYN 消息过滤掉，该方案作用一般不是太大； 25.高并发服务器客户端主动关闭连接和服务端主动关闭连接的区别12345678910以下是针对 TCP 服务来说的：1.服务端主动关闭连接在高并发场景下，当服务端主动关闭连接时，此时服务器上就会有大量的连接处于 TIME-WAIT 状态【详解见问题 7, 8, 9】2.客户端主动关闭连接当客户端主动关闭连接时，我们并不需要关心 TIME-WAIT 状态过多造成的问题，但是需要关注服务端保持大量的 CLOSE-WAIT 状态时会产生的问题【见问题 10 的解决方法】无论是客户端还是服务器主动关闭连接，从本质上来说，在高并发场景下主要关心的就是服务端的资源占用问题，而这也是采用 TCP 传输协议必须要面对的问题，其问题解决的出发点也是如何处理好服务质量和资源消耗之间的关系。","categories":[],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2022-05-09T07:37:51.000Z","updated":"2022-05-09T07:42:10.183Z","comments":true,"path":"2022/05/09/我的第一篇博客/","link":"","permalink":"http://example.com/2022/05/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"第一章内容 第二章内容 参考文献www.codesheep.cn","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-05-09T07:32:55.426Z","updated":"2022-05-09T07:32:55.427Z","comments":true,"path":"2022/05/09/hello-world/","link":"","permalink":"http://example.com/2022/05/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]}